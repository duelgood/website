<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Make a Donation</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    :root {
      --bg:#0b0c10; --panel:#111318; --muted:#b8c1cc; --text:#e9eef5; --brand:#4da3ff; --ok:#2ecc71; --err:#ff6b6b; --focus:#cce5ff;
      --radius:16px;
    }
    html, body { background: var(--bg); color: var(--text); font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji", "Segoe UI Emoji"; }
    main { max-width: 760px; margin: 40px auto; padding: 24px; background: var(--panel); border-radius: var(--radius); box-shadow: 0 10px 30px rgba(0,0,0,.35); }
    h1 { margin: 0 0 8px; font-size: 28px; letter-spacing:.3px; }
    p.subtitle { margin: 0 0 24px; color: var(--muted); }
    fieldset { border: 1px solid rgba(255,255,255,.08); border-radius: 12px; padding: 16px; margin: 16px 0; }
    legend { padding: 0 8px; color: var(--muted); }
    label { display: block; margin: 10px 0; }
    input[type="text"], input[type="email"], input[type="number"], select {
      width: 100%; padding: 12px; border-radius: 10px; border: 1px solid rgba(255,255,255,.12);
      background: #0f1117; color: var(--text); outline: none;
    }
    input::placeholder { color: #7e8899; }
    input:focus, select:focus { border-color: var(--brand); box-shadow: 0 0 0 3px rgba(77,163,255,.25); }
    small.help { color: var(--muted); display:block; margin-top:2px; }
    .row { display: grid; grid-template-columns: 1fr 140px 140px; gap: 10px; }
    .radios, .inline { display: flex; gap: 14px; flex-wrap: wrap; }
    .error { color: var(--err); font-size: 13px; margin-top: 4px; display:none; }
    .ok { color: var(--ok); font-size: 13px; }
    button[type="submit"]{
      appearance:none; border:0; background: var(--brand); color:#081018; font-weight:600;
      padding: 12px 16px; border-radius: 12px; cursor:pointer; transition: transform .03s ease-in-out, filter .2s;
    }
    button[disabled]{ filter: grayscale(1) brightness(.8); cursor:not-allowed; }
    #success-message { background: #0d1a11; border: 1px solid rgba(46, 204, 113, .35); border-radius: 12px; padding: 16px; margin-top: 16px; }
    .badge { display:inline-block; padding: 4px 8px; border-radius: 999px; background: rgba(255,255,255,.06); color: var(--muted); font-size: 12px; }
  </style>
</head>
<body>
<main>
  <h1>Make a Donation</h1>
  <p class="subtitle"><span class="badge">Test Mode</span> No payment required. Minimum donation is $1.</p>

  <form action="/api/donate" method="POST" id="donation-form" novalidate>
    <fieldset>
      <legend>Donation Amount</legend>
      <label>
        Amount (USD)
        <input type="number" name="amount" id="amount" min="1" step="0.01" required placeholder="25.00" inputmode="decimal" />
        <div class="error" id="amount-error"></div>
      </label>
    </fieldset>

    <fieldset>
      <legend>Donation Type</legend>
      <div class="radios">
        <label><input type="radio" name="type" value="one-time" checked> One-time</label>
        <label><input type="radio" name="type" value="monthly"> Monthly</label>
        <label><input type="radio" name="type" value="yearly"> Yearly</label>
      </div>
    </fieldset>

    <fieldset>
      <legend>Cause</legend>
      <div class="radios">
        <label><input type="radio" name="cause" value="a" required> Cause A</label>
        <label><input type="radio" name="cause" value="b" required> Cause B</label>
      </div>
      <div class="error" id="cause-error"></div>
    </fieldset>

    <fieldset>
      <legend>Display Information</legend>
      <label>
        Display Name (shown on website)
        <input type="text" name="display_name" placeholder="Anonymous" maxlength="50" />
        <small class="help">Leave blank to show as “Anonymous”.</small>
      </label>
    </fieldset>

    <fieldset>
      <legend>Contact Information</legend>

      <label>
        Email Address
        <input type="email" name="email" id="email" required placeholder="you@example.com" maxlength="255" autocomplete="email" />
        <div class="error" id="email-error"></div>
      </label>

      <label>
        Full Legal Name
        <input type="text" name="legal_name" id="legal_name" required placeholder="John Smith" maxlength="100" autocomplete="name" />
        <div class="error" id="name-error"></div>
      </label>

      <!-- Address Autocomplete hooks into the Street Address input -->
      <label>
        Street Address
        <input type="text" name="street" id="street" required placeholder="123 Main St" maxlength="200" autocomplete="address-line1" />
        <small class="help">Start typing and choose a suggestion. US only.</small>
        <div class="error" id="street-error"></div>
      </label>

      <div class="row">
        <label>
          City
          <input type="text" name="city" id="city" required placeholder="City" autocomplete="address-level2" />
          <div class="error" id="city-error"></div>
        </label>

        <label>
          State
          <select name="state" id="state" required autocomplete="address-level1">
            <option value="">Select</option>
            <option value="AL">AL</option><option value="AK">AK</option><option value="AZ">AZ</option><option value="AR">AR</option>
            <option value="CA">CA</option><option value="CO">CO</option><option value="CT">CT</option><option value="DE">DE</option>
            <option value="FL">FL</option><option value="GA">GA</option><option value="HI">HI</option><option value="ID">ID</option>
            <option value="IL">IL</option><option value="IN">IN</option><option value="IA">IA</option><option value="KS">KS</option>
            <option value="KY">KY</option><option value="LA">LA</option><option value="ME">ME</option><option value="MD">MD</option>
            <option value="MA">MA</option><option value="MI">MI</option><option value="MN">MN</option><option value="MS">MS</option>
            <option value="MO">MO</option><option value="MT">MT</option><option value="NE">NE</option><option value="NV">NV</option>
            <option value="NH">NH</option><option value="NJ">NJ</option><option value="NM">NM</option><option value="NY">NY</option>
            <option value="NC">NC</option><option value="ND">ND</option><option value="OH">OH</option><option value="OK">OK</option>
            <option value="OR">OR</option><option value="PA">PA</option><option value="RI">RI</option><option value="SC">SC</option>
            <option value="SD">SD</option><option value="TN">TN</option><option value="TX">TX</option><option value="UT">UT</option>
            <option value="VT">VT</option><option value="VA">VA</option><option value="WA">WA</option><option value="WV">WV</option>
            <option value="WI">WI</option><option value="WY">WY</option><option value="DC">DC</option>
          </select>
          <div class="error" id="state-error"></div>
        </label>

        <label>
          ZIP
          <input type="text" name="zip" id="zip" required placeholder="12345 or 12345-6789"
                 inputmode="numeric" pattern="^\d{5}(-\d{4})?$" />
          <div class="error" id="zip-error"></div>
        </label>
      </div>

      <!-- Hidden fields populated by Places -->
      <input type="hidden" name="place_id" id="place_id" />
      <input type="hidden" name="formatted_address" id="formatted_address" />
    </fieldset>

    <fieldset>
      <legend>Employment Information</legend>
      <label>
        Employer Name
        <input type="text" name="employer" id="employer" required placeholder="Company Name" maxlength="100" />
        <div class="error" id="employer-error"></div>
      </label>

      <label>
        Occupation
        <input type="text" name="occupation" id="occupation" required placeholder="Software Engineer" maxlength="100" />
        <div class="error" id="occupation-error"></div>
      </label>
    </fieldset>

    <button type="submit" id="submit-btn">Submit Donation (Test Mode)</button>
  </form>

  <div id="success-message" style="display:none;">
    <h2>Donation Submitted Successfully!</h2>
    <p>Thank you for your contribution. Your donation has been recorded.</p>
  </div>

  <p class="subtitle"><em>Note: This is test mode. No actual payment will be processed.</em></p>
</main>

<script>
  // --- Simple client-side validation helpers ---
  const byId = (id) => document.getElementById(id);
  const showError = (id, msg) => { const el = byId(id); el.textContent = msg || ''; el.style.display = msg ? 'block' : 'none'; };
  const emailInput = byId('email');
  const amountInput = byId('amount');
  const zipInput = byId('zip');
  const stateSelect = byId('state');

  function validateEmail() {
    if (!emailInput.value.trim()) { showError('email-error', 'Email is required.'); return false; }
    if (!emailInput.checkValidity()) { showError('email-error', 'Please enter a valid email address.'); return false; }
    showError('email-error'); return true;
  }
  function validateAmount() {
    const v = parseFloat(amountInput.value);
    if (isNaN(v) || v < 1) { showError('amount-error', 'Minimum donation is $1.00.'); return false; }
    showError('amount-error'); return true;
  }
  function validateZip() {
    const ok = /^\d{5}(-\d{4})?$/.test(zipInput.value.trim());
    showError('zip-error', ok ? '' : 'Enter a 5-digit ZIP or ZIP+4 (e.g., 12345 or 12345-6789).');
    return ok;
  }
  function validateState() {
    const ok = !!stateSelect.value;
    showError('state-error', ok ? '' : 'Please select a state.');
    return ok;
  }

  emailInput.addEventListener('input', validateEmail);
  amountInput.addEventListener('input', validateAmount);
  zipInput.addEventListener('input', validateZip);
  stateSelect.addEventListener('change', validateState);

  // --- Google Places Autocomplete (US only) ---
  let autocomplete;

  function initPlaces() {
    const streetInput = byId('street');

    // Load Places library & attach Autocomplete restricted to the US
    // Request only the fields we need to keep costs down.
    autocomplete = new google.maps.places.Autocomplete(streetInput, {
      fields: ['address_components', 'formatted_address', 'place_id'],
      types: ['address'],
      componentRestrictions: { country: ['us'] }
    });

    autocomplete.addListener('place_changed', () => {
      const place = autocomplete.getPlace();
      if (!place || !place.address_components) return;

      // Extract parts
      const get = (type, short = true) => {
        const comp = place.address_components.find(c => c.types.includes(type));
        return comp ? (short ? comp.short_name : comp.long_name) : '';
      };

      const streetNumber = get('street_number', false);
      const route = get('route', false);
      const cityCandidates = [
        get('locality', false),
        get('postal_town', false),
        get('sublocality_level_1', false),
      ].filter(Boolean);
      const city = cityCandidates[0] || '';
      const state = get('administrative_area_level_1', true);
      const zip = [get('postal_code', true), get('postal_code_suffix', true)].filter(Boolean).join('-');

      // Fill inputs
      byId('street').value = [streetNumber, route].filter(Boolean).join(' ').trim();
      byId('city').value = city;
      byId('state').value = state || '';
      byId('zip').value = zip;

      byId('place_id').value = place.place_id || '';
      byId('formatted_address').value = place.formatted_address || '';

      // Clear any prior errors
      showError('street-error'); showError('city-error'); validateState(); validateZip();
    });
  }

  // --- Submit handler (still posts to your /api/donate) ---
  document.getElementById('donation-form').addEventListener('submit', async function(e) {
    e.preventDefault();

    // Validate required fields before posting
    const causeChosen = !!(new FormData(this).get('cause'));
    if (!causeChosen) showError('cause-error', 'Please choose a cause.');
    const ok = validateEmail() & validateAmount() & validateZip() & validateState() & causeChosen;
    if (!ok) { this.reportValidity?.(); return; }

    const submitBtn = byId('submit-btn');
    const originalText = submitBtn.textContent;
    submitBtn.textContent = 'Processing…';
    submitBtn.disabled = true;

    try {
      const form = new FormData(this);
      form.append('timestamp', new Date().toISOString());
      if (!form.get('display_name')) form.set('display_name', 'Anonymous');

      // Build mailing_address from parts for storage/searching
      const street = (form.get('street') || '').trim();
      const city = (form.get('city') || '').trim();
      const state = (form.get('state') || '').trim().toUpperCase();
      const zip = (form.get('zip') || '').trim();
      form.set('mailing_address', `${street}\n${city}, ${state} ${zip}`);

      // Include place_id/formatted if user chose an autocomplete result
      form.set('place_id', byId('place_id').value || '');
      form.set('formatted_address', byId('formatted_address').value || '');

      const resp = await fetch('/api/donate', { method: 'POST', body: form });
      if (resp.ok) {
        document.getElementById('donation-form').style.display = 'none';
        document.getElementById('success-message').style.display = 'block';
      } else {
        const json = await resp.json().catch(()=>null);
        const txt = json && json.error ? json.error : await resp.text();
        alert('Error: ' + txt);
      }
    } catch (err) {
      console.error(err);
      alert('Network error. Please try again.');
    } finally {
      submitBtn.textContent = originalText;
      submitBtn.disabled = false;
    }
  });
</script>

<!-- Load Maps JavaScript API + Places library. Replace YOUR_GOOGLE_MAPS_API_KEY -->
<script
  src="https://maps.googleapis.com/maps/api/js?key=YOUR_GOOGLE_MAPS_API_KEY&libraries=places&v=weekly&callback=initPlaces"
  async defer></script>
</body>
</html>